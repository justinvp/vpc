# coding=utf-8
# *** WARNING: this file was generated by pulumi-gen-vpc. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
import pulumi_aws

__all__ = ['Vpc']


class Vpc(pulumi.ComponentResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assign_generated_ipv6_cidr_block: Optional[pulumi.Input[bool]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 enable_classiclink: Optional[pulumi.Input[bool]] = None,
                 enable_classiclink_dns_support: Optional[pulumi.Input[bool]] = None,
                 enable_dns_hostnames: Optional[pulumi.Input[bool]] = None,
                 enable_dns_support: Optional[pulumi.Input[bool]] = None,
                 instance_tenancy: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Vpc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] assign_generated_ipv6_cidr_block: Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is `false`.  If set to `true`, then subnets created will default to `assignIpv6AddressOnCreation: true` as well.
        :param pulumi.Input[str] cidr_block: The CIDR block for the VPC. Defaults to "10.0.0.0/16" if unspecified.
        :param pulumi.Input[bool] enable_classiclink: A boolean flag to enable/disable ClassicLink for the VPC. Only valid in regions and accounts that support EC2 Classic. See the [ClassicLink documentation][1] for more information. Defaults false.
        :param pulumi.Input[bool] enable_classiclink_dns_support: A boolean flag to enable/disable ClassicLink DNS Support for the VPC. Only valid in regions and accounts that support EC2 Classic.
        :param pulumi.Input[bool] enable_dns_hostnames: A boolean flag to enable/disable DNS hostnames in the VPC. Defaults to true if unspecified.
        :param pulumi.Input[bool] enable_dns_support: A boolean flag to enable/disable DNS support in the VPC. Defaults true if unspecified.
        :param pulumi.Input[str] instance_tenancy: A tenancy option for instances launched into the VPC. Defaults to "default" if unspecified.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: A mapping of tags to assign to the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['assign_generated_ipv6_cidr_block'] = assign_generated_ipv6_cidr_block
            __props__['cidr_block'] = cidr_block
            __props__['enable_classiclink'] = enable_classiclink
            __props__['enable_classiclink_dns_support'] = enable_classiclink_dns_support
            __props__['enable_dns_hostnames'] = enable_dns_hostnames
            __props__['enable_dns_support'] = enable_dns_support
            __props__['instance_tenancy'] = instance_tenancy
            __props__['tags'] = tags
            __props__['vpc_id'] = None
            __props__['vpc_resource'] = None
        super(Vpc, __self__).__init__(
            'vpc:index:Vpc',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The ID of the VPC resource.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcResource")
    def vpc_resource(self) -> pulumi.Output['pulumi_aws.ec2.Vpc']:
        """
        The VPC resource.
        """
        return pulumi.get(self, "vpc_resource")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

